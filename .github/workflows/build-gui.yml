name: Build GUI Applications

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: mark-mate-linux
          - os: windows-latest
            platform: windows
            artifact_name: mark-mate-windows
          - os: macos-latest
            platform: macos
            artifact_name: mark-mate-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libmpv-dev \
          mpv

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flet

    - name: Install project dependencies
      run: |
        pip install -e ".[dev]"

    - name: Build Flet application
      run: flet build ${{ matrix.platform }} --verbose --project "MarkMate GUI" --description "AI Teaching Assistant for Assignments and Assessment" --product "MarkMate" --org "MarkMate" --copyright "MarkMate Development Team" --build-number ${{ github.run_number }} --build-version "0.2.0"
      working-directory: src/mark_mate/gui
      env:
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1

    - name: List build output (Debug)
      run: |
        echo "=== Build directory contents ==="
        find . -name "build" -type d
        if [ -d "build" ]; then
          ls -la build/
          find build/ -type f
        fi
      working-directory: src/mark_mate/gui
      shell: bash

    - name: Package artifacts (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd src/mark_mate/gui/build/linux
        tar -czf ../../../../../../${{ matrix.artifact_name }}.tar.gz *

    - name: Package artifacts (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd src/mark_mate/gui/build/windows
        7z a ../../../../../../${{ matrix.artifact_name }}.zip *

    - name: Package artifacts (macOS)
      if: matrix.platform == 'macos'
      run: |
        cd src/mark_mate/gui/build/macos
        tar -czf ../../../../../../${{ matrix.artifact_name }}.tar.gz *

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip
        if-no-files-found: warn

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-desktop
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: ls -R

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          mark-mate-linux/*
          mark-mate-windows/*
          mark-mate-macos/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}